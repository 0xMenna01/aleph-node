//! Autogenerated weights for pallet_baby_liminal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-26, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_baby_liminal
// --extrinsic=*
// --steps=20
// --repeat=50
// --template=.maintain/pallet-weight-template.hbs
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/baby-liminal/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_baby_liminal.
pub trait WeightInfo {
    fn store_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight;
    fn overwrite_equal_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight;
    fn overwrite_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight;
    fn delete_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight;
    fn verify() -> Weight;
    fn verify_data_too_long(excess: u32) -> Weight;
    fn verify_data_deserializing_fails(data_length: u32) -> Weight;
    fn verify_key_pair_deserializing_fails(proving_key_length: u32, verification_key_length: u32) -> Weight;
    fn poseidon_one_to_one_wasm() -> Weight;
    fn poseidon_two_to_one_wasm() -> Weight;
    fn poseidon_four_to_one_wasm() -> Weight;
    fn poseidon_one_to_one_host() -> Weight;
    fn poseidon_two_to_one_host() -> Weight;
    fn poseidon_four_to_one_host() -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
    fn store_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight {
        <I as BenchmarkInfo>::store_key_pair(proving_key_length, verification_key_length)
    }

	fn overwrite_equal_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight {
		<I as BenchmarkInfo>::overwrite_equal_key_pair(proving_key_length, verification_key_length)
	}

	fn overwrite_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight {
		<I as BenchmarkInfo>::overwrite_key_pair(proving_key_length, verification_key_length)
	}

    fn delete_key_pair(proving_key_length: u32, verification_key_length: u32) -> Weight {
        <I as BenchmarkInfo>::delete_key_pair(proving_key_length, verification_key_length)
    }

    fn verify() -> Weight {
        <I as BenchmarkInfo>::verify_groth16_xor()
            .max(<I as BenchmarkInfo>::verify_groth16_linear_equation())
    }

    fn verify_data_too_long(excess: u32) -> Weight {
        <I as BenchmarkInfo>::verify_data_too_long(excess)
    }

    fn verify_data_deserializing_fails(data_length: u32) -> Weight {
        <I as BenchmarkInfo>::verify_data_deserializing_fails(data_length)
    }

    fn verify_key_pair_deserializing_fails(proving_key_length: u32, verification_key_length: u32) -> Weight {
        <I as BenchmarkInfo>::verify_key_pair_deserializing_fails(proving_key_length, verification_key_length)
    }

    fn poseidon_one_to_one_wasm() -> Weight {
        <I as BenchmarkInfo>::poseidon_one_to_one_wasm()
    }

    fn poseidon_two_to_one_wasm() -> Weight {
        <I as BenchmarkInfo>::poseidon_two_to_one_wasm()
    }

    fn poseidon_four_to_one_wasm() -> Weight {
        <I as BenchmarkInfo>::poseidon_four_to_one_wasm()
    }

    fn poseidon_one_to_one_host() -> Weight {
        <I as BenchmarkInfo>::poseidon_one_to_one_host()
    }

    fn poseidon_two_to_one_host() -> Weight {
        <I as BenchmarkInfo>::poseidon_two_to_one_host()
    }

    fn poseidon_four_to_one_host() -> Weight {
        <I as BenchmarkInfo>::poseidon_four_to_one_host()
    }
}

/// Benchmark results for pallet_baby_liminal.
trait BenchmarkInfo {
	fn store_key_pair(l: u32, m: u32, ) -> Weight;
	fn overwrite_equal_key_pair(l: u32, m: u32, ) -> Weight;
	fn overwrite_key_pair(l: u32, m: u32, ) -> Weight;
	fn delete_key_pair(l: u32, m: u32, ) -> Weight;
	fn verify_groth16_xor() -> Weight;
	fn verify_groth16_linear_equation() -> Weight;
	fn verify_data_too_long(e: u32, ) -> Weight;
	fn verify_data_deserializing_fails(l: u32, ) -> Weight;
	fn verify_key_pair_deserializing_fails(l: u32, m: u32, ) -> Weight;
	fn poseidon_one_to_one_wasm() -> Weight;
	fn poseidon_two_to_one_wasm() -> Weight;
	fn poseidon_four_to_one_wasm() -> Weight;
	fn poseidon_one_to_one_host() -> Weight;
	fn poseidon_two_to_one_host() -> Weight;
	fn poseidon_four_to_one_host() -> Weight;
}

/// Weights for pallet_baby_liminal using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:0 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairOwners (r:0 w:1)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn store_key_pair(l: u32, _m: u32, ) -> Weight {
		// Minimum execution time: 63_089 nanoseconds.
		Weight::from_ref_time(91_741_426_u64)
			// Standard Error: 73
			.saturating_add(Weight::from_ref_time(1_511_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal KeyPairOwners (r:1 w:0)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:1 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn overwrite_equal_key_pair(l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 93_130 nanoseconds.
		Weight::from_ref_time(82_421_569_u64)
			// Standard Error: 73
			.saturating_add(Weight::from_ref_time(1_833_u64).saturating_mul(l as u64))
			// Standard Error: 367
			.saturating_add(Weight::from_ref_time(2_928_u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal KeyPairOwners (r:1 w:0)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:1 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 49999]`.
	/// The range of component `m` is `[1, 9999]`.
	fn overwrite_key_pair(l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 86_684 nanoseconds.
		Weight::from_ref_time(107_460_968_u64)
			// Standard Error: 89
			.saturating_add(Weight::from_ref_time(1_335_u64).saturating_mul(l as u64))
			// Standard Error: 445
			.saturating_add(Weight::from_ref_time(1_996_u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal KeyPairOwners (r:1 w:0)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:1 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:0 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn delete_key_pair(_l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 44_423 nanoseconds.
		Weight::from_ref_time(67_514_324_u64)
			// Standard Error: 186
			.saturating_add(Weight::from_ref_time(190_u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:0)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 72_502_203 nanoseconds.
		Weight::from_ref_time(79_162_086_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:0)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 68_018_273 nanoseconds.
		Weight::from_ref_time(75_675_242_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(e: u32, ) -> Weight {
		// Minimum execution time: 32_854 nanoseconds.
		Weight::from_ref_time(35_958_991_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(3_u64).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 46_847 nanoseconds.
		Weight::from_ref_time(106_964_995_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:0)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn verify_key_pair_deserializing_fails(l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 9_441_040 nanoseconds.
		Weight::from_ref_time(10_918_030_950_u64)
			// Standard Error: 7_971
			.saturating_add(Weight::from_ref_time(37_853_u64).saturating_mul(l as u64))
			// Standard Error: 39_861
			.saturating_add(Weight::from_ref_time(288_083_u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `x` is `[0, 4294967295]`.
	fn poseidon_one_to_one_wasm() -> Weight {
		// Minimum execution time: 11_831_897 nanoseconds.
		Weight::from_ref_time(13_787_523_695_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	fn poseidon_two_to_one_wasm() -> Weight {
		// Minimum execution time: 15_325_963 nanoseconds.
		Weight::from_ref_time(21_231_915_816_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	/// The range of component `w` is `[0, 4294967295]`.
	/// The range of component `z` is `[0, 4294967295]`.
	fn poseidon_four_to_one_wasm() -> Weight {
		// Minimum execution time: 29_027_849 nanoseconds.
		Weight::from_ref_time(51_988_519_712_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	fn poseidon_one_to_one_host() -> Weight {
		// Minimum execution time: 1_522_479 nanoseconds.
		Weight::from_ref_time(1_987_640_409_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	fn poseidon_two_to_one_host() -> Weight {
		// Minimum execution time: 2_382_359 nanoseconds.
		Weight::from_ref_time(2_504_322_809_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	/// The range of component `w` is `[0, 4294967295]`.
	/// The range of component `z` is `[0, 4294967295]`.
	fn poseidon_four_to_one_host() -> Weight {
		// Minimum execution time: 4_480_060 nanoseconds.
		Weight::from_ref_time(5_203_863_502_u64)
	}
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:0 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairOwners (r:0 w:1)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn store_key_pair(l: u32, _m: u32, ) -> Weight {
		// Minimum execution time: 63_089 nanoseconds.
		Weight::from_ref_time(91_741_426_u64)
			// Standard Error: 73
			.saturating_add(Weight::from_ref_time(1_511_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal KeyPairOwners (r:1 w:0)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:1 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn overwrite_equal_key_pair(l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 93_130 nanoseconds.
		Weight::from_ref_time(82_421_569_u64)
			// Standard Error: 73
			.saturating_add(Weight::from_ref_time(1_833_u64).saturating_mul(l as u64))
			// Standard Error: 367
			.saturating_add(Weight::from_ref_time(2_928_u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal KeyPairOwners (r:1 w:0)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:1 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 49999]`.
	/// The range of component `m` is `[1, 9999]`.
	fn overwrite_key_pair(l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 86_684 nanoseconds.
		Weight::from_ref_time(107_460_968_u64)
			// Standard Error: 89
			.saturating_add(Weight::from_ref_time(1_335_u64).saturating_mul(l as u64))
			// Standard Error: 445
			.saturating_add(Weight::from_ref_time(1_996_u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal KeyPairOwners (r:1 w:0)
	// Proof Skipped: BabyLiminal KeyPairOwners (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal KeyPairDeposits (r:1 w:1)
	// Proof Skipped: BabyLiminal KeyPairDeposits (max_values: None, max_size: None, mode: Measured)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:0 w:1)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn delete_key_pair(_l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 44_423 nanoseconds.
		Weight::from_ref_time(67_514_324_u64)
			// Standard Error: 186
			.saturating_add(Weight::from_ref_time(190_u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:0)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 72_502_203 nanoseconds.
		Weight::from_ref_time(79_162_086_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:0)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 68_018_273 nanoseconds.
		Weight::from_ref_time(75_675_242_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(e: u32, ) -> Weight {
		// Minimum execution time: 32_854 nanoseconds.
		Weight::from_ref_time(35_958_991_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(3_u64).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 46_847 nanoseconds.
		Weight::from_ref_time(106_964_995_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BabyLiminal ProvingVerificationKeyPairs (r:1 w:0)
	// Proof Skipped: BabyLiminal ProvingVerificationKeyPairs (max_values: None, max_size: None, mode: Measured)
	/// The range of component `l` is `[1, 50000]`.
	/// The range of component `m` is `[1, 10000]`.
	fn verify_key_pair_deserializing_fails(l: u32, m: u32, ) -> Weight {
		// Minimum execution time: 9_441_040 nanoseconds.
		Weight::from_ref_time(10_918_030_950_u64)
			// Standard Error: 7_971
			.saturating_add(Weight::from_ref_time(37_853_u64).saturating_mul(l as u64))
			// Standard Error: 39_861
			.saturating_add(Weight::from_ref_time(288_083_u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// The range of component `x` is `[0, 4294967295]`.
	fn poseidon_one_to_one_wasm() -> Weight {
		// Minimum execution time: 11_831_897 nanoseconds.
		Weight::from_ref_time(13_787_523_695_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	fn poseidon_two_to_one_wasm() -> Weight {
		// Minimum execution time: 15_325_963 nanoseconds.
		Weight::from_ref_time(21_231_915_816_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	/// The range of component `w` is `[0, 4294967295]`.
	/// The range of component `z` is `[0, 4294967295]`.
	fn poseidon_four_to_one_wasm() -> Weight {
		// Minimum execution time: 29_027_849 nanoseconds.
		Weight::from_ref_time(51_988_519_712_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	fn poseidon_one_to_one_host() -> Weight {
		// Minimum execution time: 1_522_479 nanoseconds.
		Weight::from_ref_time(1_987_640_409_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	fn poseidon_two_to_one_host() -> Weight {
		// Minimum execution time: 2_382_359 nanoseconds.
		Weight::from_ref_time(2_504_322_809_u64)
	}
	/// The range of component `x` is `[0, 4294967295]`.
	/// The range of component `y` is `[0, 4294967295]`.
	/// The range of component `w` is `[0, 4294967295]`.
	/// The range of component `z` is `[0, 4294967295]`.
	fn poseidon_four_to_one_host() -> Weight {
		// Minimum execution time: 4_480_060 nanoseconds.
		Weight::from_ref_time(5_203_863_502_u64)
	}
}
